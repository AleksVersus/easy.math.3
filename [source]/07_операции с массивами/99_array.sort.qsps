QSP-Game сортирует значения массива (используется метод сортировки "пузырьком"). Результатом работы программы могут быть три разных массива. Направление сортировки: от нулевого элемента к последнему.
!!!ВНИМАНИЕ!!! Сортировка затрагивает лишь ту часть массива, которая указана. Если вы отсортировали текстовую часть массива, числовая останется неизменной. И наоборот: при сортировке числовой части массива, текстовая не меняется. Для сортировки обеих частей нужно отсортировать одну из них, с сохранением значений перестановки в опорный массив, а за тем по опорному массиву функцией array.rstd перетасовать значения в другой части.
Аргументы смотри ниже, после конца локации.
!@pp:if(em_array_sort):include
# #array.sort#
$args[9]=$args[9]	& !@ инициализация аргументов
if $strfind($args[1],'\[.*?\]')='': $args[1]='[up]' else $args[1]=$lcase($args[1])	& !@ управление по умолчанию, или иное
if instr($args[2],'$')=1: $args[2]=$mid($args[2],2)	& !@ опорный массив может быть только числовым
if $args[3]='': $args[3]=$args[0]	& !@ если результирующий массив не указан, результат помещается в исследуемый массив
!@ уничтожаем временные массивы перед использованием функции
killvar 'easy_math_sort_array' & !@ массив, в котором хранится порядок перетасованных элементов.
killvar 'easy_math_copy_array' & !@ массив, в который копируется сортируемый массив для получения значений
killvar 'easy_math_result_array' & !@ массив, в который будет помещаться результат сортировки
if instr($args[0],'$')=1: $args['$']='$' else $args['$']=''	& !@ переменная маркер, отмечающая тип массива
copyarr $args['$']+'easy_math_copy_array',$args[0]		& !@ копируем во временный (колода) массив исследуемый
copyarr $args['$']+'easy_math_result_array',$args[0]	& !@ копируем во временный (результирующий) массив исследуемый
if $args[2]<>'':
	!@ если задано имя опорного массива, заполняем временный опорный порядковыми номерами
	args['i']=0
	:for
	if args['i']<arrsize($args['$']+'easy_math_copy_array'):
		easy_math_sort_array[args['i']]=args['i']
		args['i']+=1
		jump 'for'
	end
end
!@ выставляем направление сортировки
if instr($args[0],'[down]')<>0:
	$args['direction']='down'
else
	$args['direction']='up'
end
args['i']=-1
:prohody
if arrsize($args['$']+'easy_math_copy_array')>0:
	!@ пока размер временного массива больше нуля
	dynamic "
!@pp:в зависимости от порядка сортировки ищем наибольшее или наименьшее значение
		if $args[0]='up':
			<<$args['$']>>args['find']=<<$args['$']>>max('<<$args['$']>>easy_math_copy_array')
		elseif $args[0]='down':
			<<$args['$']>>args['find']=<<$args['$']>>min('<<$args['$']>>easy_math_copy_array')
		end
!@pp:ищем позицию, в которой размещён данный элемент в колоде
		args['killpos']=arrpos('<<$args['$']>>easy_math_copy_array',<<$args['$']>>args['find'])
!@pp:удаляем элемент из колоды
		killvar '<<$args['$']>>easy_math_copy_array',args['killpos']
!@pp:ищем действительную позицию, исключив отсортированные
		args['realpos']=arrpos(args[1]+1,'<<$args['$']>>easy_math_result_array',<<$args['$']>>args['find'])
!@pp:используя временную переменную, меняем элементы местами
		<<$args['$']>>args['temp']=<<$args['$']>>easy_math_result_array[args['realpos']]
		<<$args['$']>>easy_math_result_array[args['realpos']]=<<$args['$']>>easy_math_result_array[args[1]+1]
		<<$args['$']>>easy_math_result_array[args[1]+1]=<<$args['$']>>args['temp']
!@pp:используя временную переменную, меняем местами номера элементов
		args['temp']=easy_math_sort_array[args['realpos']]
		easy_math_sort_array[args['realpos']]=easy_math_sort_array[args[1]+1]
		easy_math_sort_array[args[1]+1]=args['temp']
	",$args['direction'],args['i']
	args['i']+=1
	jump 'prohody'
end
if $args[2]<>'': copyarr $args[2],'easy_math_sort_array'	& !@ если задан опорный, копируем в него перетасованные номера элементов
copyarr $args[3],$args['$']+'easy_math_result_array'	& !@ копируем результат в результирующий массив
!@ удаляем временные массивы по завершении работы функции
killvar 'easy_math_sort_array'
killvar 'easy_math_copy_array'
killvar 'easy_math_result_array'
--- #array.sort# ---------------------------------
!@pp:endif

$args[0] - название массива, элементы которого необходимо отсортировать (исследуемый массив), обязательный параметр
$args[1] - порядок сортировки элементов массива: '[up]' или ничего - значения сортируются от большего к меньшему, '[down]' - значения сортируются от меньшего к большему.
$args[2] - имя массива, в который будут помещены исходные номера элементов исследуемого массива в порядке сортировки. Например, если при сортировке местами поменялись первый и второй элемент, первый элемент указанного массива получит номер 2, а второй - 1. (опорный)
$args[3] - название массива результатов, т.е. массива, в который будут переданы результаты сортировки. Если не указано, массивом результатов становится исследуемый. (результирующий)

Функция не использует иных функций библиотеки.