QSP-GAME изменяет тип содержимого массива. То есть меняется тип каждой отдельной ячейки.
$args[0] - название массива, для которого требуется поменять тип. Можно указывать как с символом '$', так и без него перед именем.
$args[1] - управление:
	[string] - все ячейки массива приводятся к строковому типу (по умолчанию);
	[number] - все ячейки массива приводятся к числовому типу;
	[reverse] - тип ячеек меняется на противоположный (не знаю, кому это может понадобиться);
	[hard] - режим, расширяющий работу режима [string], при этом ячейкам, тип которых определяется как 'empty' (см. функцию "em.var.getType"), принудительно присваивается строковое значение "0".
	Смысла конвертировать массив некортежей в массив кортежей нет, поэтому преобразование к кортежам не будет. Кортежи преобразуются в строки, но не в числа.
$args[2] - результирующий массив. Если не указано, результат помещается в исходный массив.

!@pp:if(em_arr_chtype):include
# em.arr.chType
$args[0]=$args[0] & !@ название массива
if $args[1]='': $args[1]='[string]' else $args[1]=$args[1] & !@ управление
$args[1]=$lcase($args[1])
if $args[2]='': $args[2]=$args[0] & !@ название результирующего массива
!@ инициализируем локальные массивы, имена которых мы вряд ли передадим внутрь функции
local em_arr_chtype_old_array, em_arr_chtype_new_array
!@ копируем в em_arr_chtype_old_array значения из переданного массива
copyarr 'em_arr_chtype_old_array',$args[0]
!@ получаем «чистые» имена исходного и конечного массивов
if instr($args[0], '$')=1: $args[0]=$mid($args[0],2)
if instr($args[2], '$')=1: $args[2]=$mid($args[2],2)
!@ дальнейшие манипуляции производим внутри dynamic. Поскольку внутри dynamic мы будем работать только с заранее предопределёнными
!@ именами массивов em_arr_chtype_old_array, em_arr_chtype_new_array, мы можем использовать любые локальные переменные независимо
!@ от того смену типа какого массива должна сделать наша функция
dynamic {
local $type, $hard, $convert, getType, $resType, $mode
if instr($args[1],'[reverse]')<>0: $type='reverse'
if instr($args[1],'[number]')<>0: $type='number'
if instr($args[1],'[string]')<>0: $type='string'
if instr($args[1],'[hard]')<>0: $hard='hard'
$convert['StrInNum']={em_arr_chtype_new_array[args[0]]=val($em_arr_chtype_old_array[args[0]])}
$convert['NumInStr']={$em_arr_chtype_new_array[args[0]]=$str(em_arr_chtype_old_array[args[0]])}
$convert['StrInStr']={$em_arr_chtype_new_array[args[0]]=$em_arr_chtype_old_array[args[0]]}
$convert['NumInNum']={em_arr_chtype_new_array[args[0]]=em_arr_chtype_old_array[args[0]]}
$convert['TplInStr']={$em_arr_chtype_new_array[args[0]]='('+$replace($em_arr_chtype_old_array[args[0]],'',',')+')'}
loop local i,size=0,arrsize('em_arr_chtype_old_array') while i<size step i+=1:
	!@ ------------------------- данный блок кода можно заменить на em.var.getType ------------------------
		getType['tuple']=dyneval({result=iif($em_arr_chtype_old_array[args[0]]<>'' and instr($em_arr_chtype_old_array[args[0]],'')<>0,1,0)},i)
		getType['string']=dyneval({result=iif($em_arr_chtype_old_array[args[0]]<>'',1,0)},i)
		getType['number']=dyneval({result=iif(em_arr_chtype_old_array[args[0]]<>0,1,0)},i)
		if getType['string'] and getType['number'] and getType['tuple']:
			$resType='both' & !@ в переменной содержатся все типы данных. По сути это ошибка
		elseif getType['tuple']:
			$resType='tuple'
		elseif getType['string'] and no (getType['number'] or getType['tuple']):
			$resType='string' & !@ переменная содержит текстовое значение
		elseif no (getType['string'] or getType['tuple']) and getType['number']:
			$resType='number' & !@ переменная содержит числовое значение
		elseif no (getType['string'] or getType['number'] or getType['tuple']):
			$resType='empty' & !@ переменная не содержит значений, либо содержит значения по-умолчанию
		end
	!@ ------------------------- данный блок кода можно заменить на em.var.getType ------------------------
	!@ преобразуем в строковый
	if $type='string' and ($resType='string' or $resType='empty' or $resType='both'): $mode='StrInStr'
	if $type='string' and $resType='tuple': $mode='TplInStr'
	if $type='string' and $resType='number': $mode='NumInStr'
	if $type='string' and $resType='empty' and $hard='hard': $mode='NumInStr' 
	!@ преобразуем в числовой
	if $type='number' and ($resType='string' or $resType='empty' or $resType='tuple'): $mode='StrInNum'
	if $type='number' and ($resType='number' or $resType='both'): $mode='NumInNum'
	!@ для реверса
	if $type='reverse' and ($resType='string' or $resType='empty' or $resType='tuple'): $mode='StrInNum'
	if $type='reverse' and $hard='hard' and $resType='empty': $mode='NumInStr'
	if $type='reverse' and $resType='number': $mode='NumInStr'
	if $type='reverse' and $resType='both': $mode='both'	& !@ данный режим не должен выпадать в 5.8.0
	if $mode='both':
		!@ данный режим ошибочный, но я его оставляю, пока не отловлю возможные баги
		dynamic $convert['StrInStr'],i
		dynamic $convert['NumInNum'],i
	else
		dynamic $convert[$mode],i
	end
end
},$args[0],$args[1],$args[2]	& !@ передаём в dynamic все аргументы, хотя все они нам и не нужны.
if $args[0]=$args[2]:
	killvar $args[0]
end
copyarr $args[2],'em_arr_chtype_new_array'
--- em.arr.chType ---------------------------------
!@pp:endif

Функция не использует иных функций библиотеки

$mass[0]='123'              
$mass[1]='456'             
mass[2]=789                 
mass[3]=901                 
$mass[4]='stringAbout'
$mass[5]='555'
$mass[6]=(123,56,23,9,137)   
$mass[7]=''                
$mass[8]='123'
mass[9]=4569

@em.arr.chType('mass','[string]','mass_str')
@em.arr.chType('mass','[number]','mass_num')
@em.arr.chType('mass','[reverse]','mass_rev')
@em.arr.chType('mass','[string][hard]','mass_strh')
@em.arr.chType('mass','[reverse][hard]','mass_revh')
@em.fewArrs.print('$mass','mass','$mass_str','mass_num','$mass_rev','mass_rev','$mass_strh','$mass_revh','mass_revh')
