QSP-Game функция обратная функции сортировки. По опорному массиву восстанавливаем массив к состоянию до сортировки.
$args[0]- массив, данные в котором необходимо восстановить (исследуемый)
$args[1] - массив фиксации, где находится список, согласно которому перетасованы элементы (опорный)
$args[2] - массив результатов - сюда помещается итог перетасовки, если не указан результат помещается в исходный массив.
!@pp:if(em_array_dsrt):include
# #array.dsrt#
$args[9]=$args[9]	& !@ инициализация аргументов
$args[1]=$replace($args[1],'$')	& !@ массив фиксации не может быть строковым
if $args[2]='': $args[2]=$args[0]	& !@ если не указан массив результатов, результат помещается в исходный
killvar 'easy_math_sort_array'	& !@ защита от дурака, удаляем возможные данные во временном массиве
killvar $args['$']+'easy_math_copy_array'	& !@ защита от дурака, удаляем возможные данные во временном массиве
if instr($args[0],'$')=1: $args['$']='$' else $args['$']=''	& !@ маркер типа массива
copyarr 'easy_math_sort_array',$args[1]	& !@ копируем опорный массив во временный
!@ с помощью цикла перставляем элементы согласно опорному массиву
args['i']=0
:for
if args['i']<arrsize('easy_math_sort_array'):
	args['j']=arrpos('easy_math_sort_array',args['i'])
	dynamic $args['$']+"easy_math_copy_array[args[0]] = "+$args[0]+"[args[1]]",args['i'],args['j']
	args['i']+=1
	jump 'for'
end
!@ копируем перетасованный временный массив в результирующий
copyarr $args[2],$args['$']+"easy_math_copy_array"
--- #array.dsrt# ---------------------------------
!@pp:endif

Функция не использует иных функций библиотеки.