QSP-Game сортирует значения массива

!@ $0 - сортируемый массив, обязательный параметр. Тип данных определяется по префиксу типа.
!@ #1 - порядок сортировки: 0 (по умолчанию) - от меньшего к большему, 1 - от большего к меньшему.
!@ $2 - опорный массив (сюда вносятся исходные индексы элементов), только числовой массив.
!@ $3 - название массива результатов, т.е. массива, в который будут переданы результаты сортировки. Если не указано, массивом результатов становится исследуемый. (результирующий)
!@pp:if(em_arr_sort):include
# em.arr.sort
!@pp:if(em_fuse):include
if $args[0] = '': msg 'em.arr.sort: Wrong array name → <<$args[0]>>' & exit
if $args[2]<>'' and instr('$%', $mid($args[2],1,1)): msg 'em.arr.sort: type prefix cannot be specified → <<$args[2]>>' & exit
!@pp:endif
if $args[3] = '': $args[3] = $args[0]	& !@ если результирующий массив не указан, результат помещается в исследуемый массив
$args[21] = iif(instr('$%', $mid($args[0],1,1)), $mid($args[0],1,1), '')	& !@ type prefix
local em_arr_sort_refl_array_ & !@ массив, в котором хранится порядок перетасованных элементов.
local em_arr_sort_result_array_ & !@ массив, в который будет помещаться результат сортировки
copyarr '<<$args[21]>>em_arr_sort_result_array_', $args[0]	& !@ копируем в результирующий массив исследуемый
!@ Создаём опорный массив
@em.arr.enumerate('<<$args[21]>>em_arr_sort_result_array_', '%em_arr_sort_refl_array_')
!@ сортируем опорный массив:
sortarr '%em_arr_sort_refl_array_', args[1]
!@ распаковываем опорный массив:
loop args[22] = 0 while args[22]<arrsize('%em_arr_sort_refl_array_') step args[22]+=1:
	dynamic "
		<<$args[21]>>em_arr_sort_result_array_[args[0]], em_arr_sort_refl_array_[args[0]] = %em_arr_sort_refl_array_[args[0]]
	", args[22]
end

if $args[2] <> '': copyarr $args[2], 'em_arr_sort_refl_array_'	& !@ если задан опорный, копируем в него перетасованные номера элементов
copyarr $args[3], '<<$args[22]>>em_arr_sort_result_array_'	& !@ копируем результат в результирующий массив
--- em.arr.sort ---------------------------------
!@pp:endif

Функция не использует иных функций библиотеки.

old_mass[0]=157
old_mass[1]=250
old_mass[2]=709
old_mass[3]=413
old_mass[4]=532
old_mass[5]=779
old_mass[6]=730
old_mass[7]=565

@em.arr.sort('old_mass')

loop local i,size=0,arrsize('old_mass') while i<size step i+=1:
	*pl "old_mass[<<i>>]=<<old_mass[i]>>"
end

*pl

old_mass[0]=966
old_mass[1]=812
old_mass[2]=796
old_mass[3]=304
old_mass[4]=678
old_mass[5]=118
old_mass[6]=901
old_mass[7]=132

@em.arr.sort('old_mass','[down]','em_array')


loop local i,size=0,arrsize('old_mass') while i<size step i+=1:
	*pl "old_mass[<<i>>]=<<old_mass[i]>>"
end
loop local i,size=0,arrsize('em_array') while i<size step i+=1:
	*pl "em_array[<<i>>]=<<em_array[i]>>"
end

*pl

old_mass[0]=967
old_mass[1]=629
old_mass[2]=541
old_mass[3]=290
old_mass[4]=852
old_mass[5]=334
old_mass[6]=318
old_mass[7]=529

@em.arr.sort('old_mass','[down]','em_array','new_mass')

loop local i,size=0,arrsize('old_mass') while i<size step i+=1:
	*pl "old_mass[<<i>>]=<<old_mass[i]>>"
end
loop local i,size=0,arrsize('em_array') while i<size step i+=1:
	*pl "em_array[<<i>>]=<<em_array[i]>>"
end
loop local i,size=0,arrsize('new_mass') while i<size step i+=1:
	*pl "new_mass[<<i>>]=<<new_mass[i]>>"
end

*pl

$mass[0]='88ff88'
$mass[1]='ff00ff'
$mass[2]='0ff0f8'
$mass[3]='ffffff'
$mass[4]='8888ff'
$mass[5]='fff8f8'

@em.arr.sort('$mass','[down]','em_array')

loop local i,size=0,arrsize('$mass') while i<size step i+=1:
	*pl "$mass[<<i>>]=<<$mass[i]>>"
end
loop local i,size=0,arrsize('em_array') while i<size step i+=1:
	*pl "em_array[<<i>>]=<<em_array[i]>>"
end
