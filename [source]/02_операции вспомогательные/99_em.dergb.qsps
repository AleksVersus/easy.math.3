QSP-Game Функция, обратная функции RGB. На основе числового кода получает составляющие
(r*1)+(g*256)+(b*256*256)+(a*256*256*256)
arsg[0] - числовой код цвета
$args[1] - управление /wa — включить в результат альфаканал
!@pp:if(em_dergb):include
# em.deRGB
local red, green, blue, alpha
local zero=rgb(0,0,0,128)	& !@ данная переменная помогает нам убрать знак из числа в случае с отрицательными значениями
local r,g,b,a=1,256,256*256,256*256*256
if args[0]>0:
	!@ если числовой код цвета больше нуля, вычисляем так
	alpha=args[0]/a
	blue=(args[0] mod a)/b
	green=(args[0] mod a mod b)/g
	red=(args[0] mod a mod b mod g)/r
else
	!@ в противном случае вычисляем так
	args[0]-=zero
	alpha=args[0]/a+128
	blue=(args[0] mod a)/b
	green=(args[0] mod a mod b)/g
	red=(args[0] mod a mod b mod g)/r
end
if $lcase($trim($args[1]))='/wa':
	!@ если хотим получить все четыре параметра
	$result=(red,green,blue,alpha)
else
	!@ если нам достаточно только цветов
	$result=(red,green,blue)
end
--- em.deRGB ---------------------------------
!@pp:endif

$result - функция возвращает все три составляющие в виде кортежа.

Функция не использует иных функций библиотеки.

yellow=rgb(255,255,0)
seablue=rgb(0,98,98)	& !@ #006262
red,green,blue = @em.deRGB(yellow)
*pl "<<red>>,<<green>>,<<blue>>"	& !@ 255,255,0
red,green,blue = @em.deRGB(seablue)
*pl "<<red>>,<<green>>,<<blue>>"	& !@ 0,98,98

knaki=rgb(240,230,140,100)
red,green,blue = @em.deRGB(knaki)
*pl "<<red>>,<<green>>,<<blue>>"	& !@ 240,230,140
red,green,blue,alpha = @em.deRGB(knaki,'/wa')
*pl "<<red>>,<<green>>,<<blue>>,<<alpha>>"	& !@ 240,230,140,100

knaki=rgb(240,230,140,237)
red,green,blue = @em.deRGB(knaki)
*pl "<<red>>,<<green>>,<<blue>>"	& !@ 240,230,140
red,green,blue,alpha = @em.deRGB(knaki,'/wa')
*pl "<<red>>,<<green>>,<<blue>>,<<alpha>>"	& !@ 240,230,140,237

Думаю, следует пояснить способ представления целых числ в QSP.

Числа в QSP представлены в виде четырёхбайтных символов. 4 байта по восемь бит, всего 32 бита.

Первый бит отвечает за знак числа. 0 - число положительное, 1 - число отрицательное. Для более полного понимания как это работает лучше ознакомиться со статьёй "Дополнительный код".

Отсюда и берётся максимально число в QSP в 2147483647. В двоичном виде это:

0111 1111 1111 1111 1111 1111 1111 1111

Функция RGB принимает на вход четыре числа от 0 до 255. Каждое такое число занимает только один байт, все остальные байты при этом остаются пустыми. Это не очень экономный вариант хранения данных. При таком варианте цвет фона, например, пришлось бы хранить в четырёх переменных, а не в одной как сейчас. Но зачем нам это нужно, если у нас фактически четыре однобайтных числа и мы можем хранить числа размером до четырёх байт.

Предположим нам пришли числа 240, 230, 140 и 237, что соответствует red, green, blue, alpha. Вот как они выглядят в двоичной системе.

0000 0000 0000 0000 0000 0000 1111 0000 - 240
0000 0000 0000 0000 0000 0000 1110 0110 - 230
0000 0000 0000 0000 0000 0000 1000 1100 - 140
0000 0000 0000 0000 0000 0000 1110 1101 - 237

И как видите, мы легко можем упаковать эти числа в одно четырёхбайтное число. С красной составляющей ничего не делаем. Число зелёной составляющей смещаем на восемь байт. Число синей составляющей смещаем на 16 байт, а число составляющей альфа смещаем на 24 байта и получаем уже вот такие числа:

0000 0000 0000 0000 0000 0000 1111 0000
0000 0000 0000 0000 1110 0110 0000 0000
0000 0000 1000 1100 0000 0000 0000 0000
1110 1101 0000 0000 0000 0000 0000 0000

Ну и теперь, с помощью побитового ИЛИ мы "упаковываем" четыре однобайтовых числа в одно четырёхбайтовое число:

1110 1101 1000 1100 1110 0110 1111 0000

(в коде функции RGB всё это написано одной строкой `(a << 24) | (b << 16) | (g << 8) | r`)

Однако, как вы можете видеть, теперь первым битом идёт единица. Это значит, что наше четырёхбайтовое число в десятеричном представлении будет отрицательным и извлечь из него составляющие будет очень сложно, поскольку однобайтовые-то числа все положительные.

Если правильно вычислить составляющую альфа, все остальные составляющие вычислить не составит проблем. А чтобы правильно вычислить составляющую альфа, нужно просто избавиться от знака минус на этапе вычисления. Делается это весьма простым способом. Исключительно знак минус, без числа задаётся в таком виде:

1000 0000 0000 0000 0000 0000 0000 0000

Это соответствует значению 128 для альфа и значению ноль для всех остальных составляющих. Таким образом, нам нужно из четырёхбайтного числа вычесть rgb(0,0,0,128)

Таким образом мы избавляемся от знака. И это же эквивалентно тому, что мы из составляющей альфа вычитаем 128.

0110 1101 1000 1100 1110 0110 1111 0000

Полученное число легко разложить на составляющие. Чтобы восстановить значение альфа, мы просто добавляем к извлечённому значению 128.
