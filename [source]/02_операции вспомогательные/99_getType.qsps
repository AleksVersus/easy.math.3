Функция получает тип переменной.
$args[0] - имя переменной/массива. Можно указывать название непосредственно переменной/массива, или конкретную ячейку масссива.
!@pp:if(em_gettype):include
# em.var.getType
!@ функция получает тип переменной
$args[0]=$args[0] & !@ имя переменной с $ иили без не важно
if instr($args[0], '$')=1: $args[0]=$mid($args[0],2)
args['string']=dyneval("if $<<$args[0]>><>'': result=1 else result=0")
args['number']=dyneval("if <<$args[0]>><>0: result=1 else result=0")
if args['string']=1 and args['number']=1:
	$args['result']='both' & !@ в переменной содержатся оба типа данных. По сути это ошибка
elseif args['string']=1 and args['number']=0:
	$args['result']='string' & !@ переменная содержит текстовое значение
elseif args['string']=0 and args['number']=1:
	$args['result']='number' & !@ переменная содержит числовое значение
elseif args['string']=0 and args['number']=0:
	$args['result']='empty' & !@ переменная не содержит значений, либо содержит значения по-умолчанию
end
$result=$args['result']
--- em.var.getType ---
!@pp:endif

Функция не использует иных функций библиотеки.

$result - в результате функция возвращает строку:
'both' - этот результат означает, что существуют как текстовое, так и числовое значение для указанной переменной. В плеерах версии 5.7.0 и ниже в одном массиве под одним и тем же индексом можно хранить как текстовое так и числовое значение. Например:
$varname[1]='text' & varname[1]=234
В этом случае функция вернёт строку 'both'
'string' - этот результат означает, что переменная содержит только текстовое значение отличное от значения переменной по умолчанию.
'number' - этот результат означает, что переменная содержит только числовое значение отличное от значения переменной по умолчнаию.
'empty' - этот результат означает, что переменная не создана, либо содержит значение по умолчанию, текстовое и числовое.