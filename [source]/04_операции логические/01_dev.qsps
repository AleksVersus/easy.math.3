QSP-Game Побайтовое вычитание с переполнением
$args[0] - уменьшаемое (любой длины), можно  args[0] (ограниченное значение).
$args[1] - вычитаемое (любой длины), можно  args[1] (ограниченное значение).
!@pp:if(em_dev):include
# #dev#
!@ инициализация аргументов и приведение к одной длине
if $args[0]='': $args[0]=$str(args[0]) else $args[0] = $args[0]	& !@ уменьшаемое
if $args[1]='': $args[1]=$str(args[1]) else $args[1] = $args[1]	& !@ вычитаемое
args['max_len']=max(len($args[0]),len($args[1]))
$args[0]=$func('#zero#',args['max_len']-len($args[0]))+$args[0]
$args[1]=$func('#zero#',args['max_len']-len($args[1]))+$args[1]
:prev
$result=''	& !@ исходное значение результата пусто
args['i'] = args['max_len']	& !@ счётчик выставляем по макимальной длине
args['lst_byte'] = 0	& !@ значение переполнения
:for
if args['i']>0:
	!@ цикл выполняем, пока счётчик не достигнет нуля
	!@ вычитаем цифры на разряде
	args['res_byte']=val($mid($args[0],args['i'],1))-val($mid($args[1],args['i'],1))+args['lst_byte']
	if args['res_byte']<0:
		!@ если разница получилась отрицательной
		!@ приводим её к положительному значению
		args['res_byte']=10+args['res_byte']
		!@ в переполнение записываем -1
		args['lst_byte']=-1
	else
		!@ если разница положительная, в переполнение идёт 0
		args['lst_byte']=0
	end
	!@ записываем полученную цифру в результат
	$result=$str(args['res_byte'])+$result
	!@ повторяем
	args['i']-=1
	jump 'for'
elseif args['lst_byte']=-1:
	!@ если после всех итерраций осталось число в переполнении
	!@ новым уменьшаемым оказывается полученный результат
	$args[0]=$result
	!@ новым вычитаемым оказывается единица
	$args[1]=$func('#zero#',args['max_len']-1)+'1'
	jump 'prev'
end
--- #dev# ---------------------------------
!@pp:endif

Функция использует функцию #zero#

!@pp:if(em_add!=True):nopp
!@pp:var(em_zstr)
!@pp:endif