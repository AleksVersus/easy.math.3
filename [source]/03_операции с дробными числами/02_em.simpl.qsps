QSP-Game функция simplificate сравнивает два числа и выдаёт в результат большее.
$args[0] - первое число, только текстовое значение
$args[1] - второе число, только текстовое значение
$result - результат, текстовое значение
$float - число.
$digits - только цифры
$minus - знак перед числом
$int - целая часть числа
int_len - длина целой части числа
$fract - дробная часть числа
!@pp:if(em_simpl):include
# em.simpl
local $float, $digits, $minus, $int, int_len, $fract
$float[0]=@em.dz($args[0],1)	& !@ убираем лишние нули из чисел
$float[1]=@em.dz($args[1],1)	& !@ убираем лишние нули из чисел

if instr($float[0],'.')=0: $float[0]+='.0'	& !@ если точки нет, дописываем
if instr($float[1],'.')=0: $float[1]+='.0'	& !@ если точки нет, дописываем

if $float[0]=$float[1]:
	!@ если числа равны, возвращаем первое и закрываем
	$result=@em.dz($float[0])
	exit
else
	!@ если числа не равны
	!@ получаем знаки чисел
	if instr($float[0],'-')=1:
		$digits[0]=$mid($float[0],2)	& !@ получаем модуль числа
		$minus[0]='-'	& !@ выставляем знак
	else
		$digits[0]=$float[0]	& !@ получаем модуль числа
		$minus[0]=''	& !@ выставляем знак
	end
	if instr($float[1],'-')=1:
		$digits[1]=$mid($float[1],2)	& !@ получаем модуль числа
		$minus[1]='-'	& !@ выставляем знак
	else
		$digits[1]=$float[1]	& !@ получаем модуль числа
		$minus[1]=''	& !@ выставляем знак
	end
	!@ сравниваем за счёт знаков
	if $minus[0]='-' and $minus[1]<>'-':
		!@ если первое число отрицательное, а второе нет, возвращаем второе число
		$result=@em.dz($float[1])
		exit
	elseif $minus[1]='-' and $minus[0]<>'-':
		!@ если второе число отрицательное, а первое нет, возвращаем второе число
		$result=@em.dz($float[0])
		exit
	else
		!@ сравнение за счёт знаков не удалось, сравниваем по частям
		$int[0]=$mid($digits[0],1,instr($digits[0],'.')-1)
		$int_len[0]=len($int[0])
		$int[1]=$mid($digits[1],1,instr($digits[1],'.')-1)
		$int_len[1]=len($int[1])
		!@ нужно сравнить целые числа, доводим их до одинаковой длины
		if $int_len[0]>$int_len[1]:
			!@ если длина первого числа больше второго, приводим длину второго к первому
			$int[1]=@em.zero($int_len[0]-$int_len[1])+$int[1]
		elseif $int_len[0]<$int_len[1]:
			!@ если длина второго числа больше первого, приводим длину первого к второму
			$int[0]=@em.zero($int_len[1]-$int_len[0])+$int[0]
		end
		!@ сравниваем числа
		if $int[1]=$int[0]:
			!@ если целые части равны, сравниваем дробные части
			$fract[0]=$mid($digits[0],instr($digits[0],'.')+1)
			$fract[1]=$mid($digits[1],instr($digits[1],'.')+1)
			!@ 
			if $max($fract[1],$fract[0])=$fract[1]:
				!@ если второе число больше первого
				jump 'second'
			elseif $max($fract[1],$fract[0])=$fract[0]:
				!@ если второе число больше первого
				jump 'first'
			end
		elseif $max($int[1],$int[0])=$int[1]:
			!@ если второе число больше первого
			:second
			if $minus[1]='-':
				!@ если числа отрицательные, то большее число по модулю на самом деле меньшее:
				$result=@em.dz($float[0])
				exit
			else
				$result=@em.dz($float[1])
				exit
			end
		elseif $max($int[1],$int[0])=$int[0]:
			!@ если второе число больше первого
			:first
			if $minus[1]='-':
				!@ если числа отрицательные, то большее число по модулю на самом деле меньшее:
				$result=@em.dz($float[1])
				exit
			else
				$result=@em.dz($float[0])
				exit
			end
		end
	end
end
$result=@em.dz($result)
--- em.simpl ---------------------------------
!@pp:endif

Функция использует функции библиотеки em.dz и em.zero
!@pp:if(em_simpl!=True):nopp
!@pp:var(em_dz)
!@pp:var(em_zero)
!@pp:endif

@em.simpl('9.05',"-9")	& !@ '9.05'
@em.simpl('9.05','-9.05')	& !@ '9.05'
@em.simpl('9.05',"10")	& !@ '10'
@em.simpl('9.05',"9.55")	& !@ '9.55'
@em.simpl('9.99',"9.999")	& !@ '9.999'
@em.simpl('-1.69',"1.3")	& !@ '1.3'
@em.simpl('-1.69',"-1.3")	& !@ '-1.3'
@em.simpl('1.69',"1.3")	& !@ '1.69'
@em.simpl('1.69',"-1.3")	& !@ '1.69'
