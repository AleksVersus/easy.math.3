QSP-Game Вычисление квадратного корня методом Ньютона.
$args[0] - число, текстовое значение
args[1] - точность. Целое число: 100 - сотые, 1000 - тысячные и т.д.
$args[2] - первое приближение, только текстовое значение. Вы можете указать примерно чему будет равен результат. Это ускорит вычисление
!@pp:if(em_sqrt):include
# #sqrt#
$args[9] = $args[9]
if args[1] = 0: args[1] = 100
if $args[2]='': $args[2]='1'
:still
$args['res']=$func('#:#',$func('#+#',$args[2],$func('#:#',$args[0],$args[2],args[1])),'2',args[1])
$args['quad'] = $func('#*#',$args['res'],$args['res'])
if $args['res']<>$args[2]:
	$args[2]=$args['res']
	jump 'still'
else
	$result=$args['res']
	exit
end
--- #sqrt# ---------------------------------
!@pp:endif

Используются функции '#:#', #+#, '#*#'

!@pp:if(em_sqrt!=True):nopp
!@pp:var(em_multiply)
!@pp:var(em_addition)
!@pp:var(em_div)
!@pp:endif

Существует простое линейное уравнение, повторяя вычисление которого несколько раз, мы получаем корень числа с некоторой погрешностью. Чем чаще мы производим вычисление, тем точнее результат. Округление числа производится до требуемого знака после запятой. Когда предыдущее вычисленное значение становится равно предыдущему, проверяется погрешность вычисления. Если погрешность не превышает 0.00000001, число принимается. В противном случае выдаётся ноль.

Функция использует #:#, #*#, #+#, в связи с чем к ней применимы те же ограничения, что и к этим функциям. Так же поскольку производится несколько десятков и сотен циклических вычислений, функция может заметно подвешивать игру даже при вычислении небольших значений. В настоящее время функция позволяет использовать значение первого приближения, чтобы сократить время расчётов. Значение необходимо передавать вторым аргументом ($args[2]).